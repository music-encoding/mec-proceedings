<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>

<!-- This file contains a customization of MEI for papers submitted for the proceedings of the Music Encoding Conference. -->
<!-- To parse instances conforming to this schema using oXygen, make sure "Check ID/IDREF" is *unchecked* in 
  Options > Preferences > XML > XML Parser > RELAX NG -->

<TEI xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:math="http://exslt.org/math" xmlns:ex="http://www.music-encoding.org/ns/mei/Examples">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Music Encoding Initiative Guidelines: <title type="sub">All AnyStart
            Customization</title></title>
        <respStmt>
          <resp>Authored by</resp>
          <name xml:id="PR">Perry Roland</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change n="1" when="2016-12-02" who="#PR">
        <desc>Creation of the initial ODD.</desc>
      </change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <schemaSpec ident="mei" ns="http://www.music-encoding.org/ns/mei" prefix="mei_"
        start="confSubmission">

        <!-- Declare MEI, XLink, and TEI Example namespaces for use in Schematron -->
        <constraintSpec ident="set_ns" scheme="isoschematron" mode="add">
          <constraint>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="mei"
              uri="http://www.music-encoding.org/ns/mei"/>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="xlink"
              uri="http://www.w3.org/1999/xlink"/>
            <sch:ns xmlns="http://purl.oclc.org/dsdl/schematron" prefix="ex"
              uri="http://www.music-encoding.org/ns/mei/Examples"/>
          </constraint>
        </constraintSpec>

        <!-- Include modules -->
        <moduleRef key="MEI"/>
        <moduleRef key="MEI.shared"/>
        <moduleRef key="MEI.figtable"/>
        <moduleRef key="MEI.namesdates"/>
        <moduleRef key="MEI.ptrref"/>
        <moduleRef key="MEI.text"/>
        <moduleRef key="MEI.confPaper"/>


        <!-- ******************************************************************** -->
        <!-- CONFORMING CHANGES -->

        <elementSpec ident="annot" module="MEI.shared" mode="replace">
          <desc>(annotation) – Provides a short statement explaining the text or indicating the
            basis for an assertion.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.annotLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textPhraseLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="annot_content_constraint" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:annot">
                <sch:assert role="warning"
                  test="substring(normalize-space(.), string-length(normalize-space(.))) eq '.'"
                  >Notes should end with a period.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="biblList" module="MEI.shared" mode="replace">
          <desc>List of bibliographic references.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:ref name="model.headLike"/>
            <rng:oneOrMore>
              <rng:ref name="model.biblLike"/>
            </rng:oneOrMore>
          </content>
          <constraintSpec ident="check_biblListHeadContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:biblList">
                <sch:assert test="matches(mei:head, '^WORKS CITED$', 'i')">The head element must
                  match "WORKS CITED" – no other characters, spaces, or punctuation signs are
                  allowed.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="bibl" module="MEI.shared" mode="replace">
          <desc>(bibliographic reference) – Provides a loosely-structured bibliographic citation in
            which the sub-components may or may not be explicitly marked.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.pointing"/>
            <memberOf key="model.biblLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.biblPart"/>
                <rng:ref name="model.imprintPart"/>
                <rng:ref name="model.textPhraseLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="check_biblContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:confSubmission/mei:biblList/mei:bibl">
                <sch:assert test="@xml:id">The bibl element must have an @xml:id
                  attribute.</sch:assert>
                <sch:assert test="string-length(normalize-space(.)) &gt; 0">The bibl element must
                  have textual content.</sch:assert>
              </sch:rule>
              <sch:rule context="mei:quote/mei:bibl">
                <sch:assert test="@target">The bibl element must have a @target
                  attribute.</sch:assert>
              </sch:rule>
              <!--<sch:rule context="mei:bibl[@target]">
                <sch:assert test="@target=//mei:confSubmission/mei:biblList//mei:bibl/@xml:id">The
                  value in @target must match the @xml:id attribute of a bibl element in the "Works
                  Cited" section.</sch:assert>
              </sch:rule>
              <sch:rule context="mei:bibl[mei:title[@level eq 'j']]">
                <sch:assert test="mei:title[@level eq 'a']">When a journal title is present, an
                  article title must also be present.</sch:assert>
              </sch:rule>
              <sch:rule context="mei:confSubmission/mei:biblList/mei:bibl[mei:*]">
                <sch:assert test="mei:imprint">When other markup is present, an imprint element must
                  also be present.</sch:assert>
                <sch:assert test="mei:author">When other markup is present, an author element must
                  also be present.</sch:assert>
              </sch:rule>-->
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="biblScope" module="MEI.shared" mode="replace">
          <desc>(scope of citation) – Defines the scope of a bibliographic reference, for example as
            a list of page numbers, or a named subdivision of a larger work.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.measurement"/>
            <memberOf key="model.biblPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textPhraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="from" usage="opt">
              <datatype>
                <rng:data type="token"/>
              </datatype>
            </attDef>
            <attDef ident="to" usage="opt">
              <datatype>
                <rng:data type="token"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="caption" module="MEI.shared" mode="replace">
          <desc>A label which accompanies an illustration or a table.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.captionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="bibl"/>
                <rng:ref name="rend"/>
                <rng:ref name="term"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="check_captionContent" scheme="isoschematron">
            <constraint>
              <sch:rule
                context="mei:*[local-name() eq 'fig' or local-name() eq 'table']/mei:caption">
                <sch:assert role="warning"
                  test="not(matches(normalize-space(.), '^(Fig|Tab)[^\s]*\s*[0-9\p{P}]+', 'i'))"
                  >Figures and tables do not require a label in the form of "Figure/Table 1.",
                  etc.</sch:assert>
                <sch:assert role="warning" test="node() or text()">Caption should have
                  content.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="div" module="MEI.shared" mode="replace">
          <desc>(division) – Major structural division of text, such as a preface, chapter or
            section.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.divLike"/>
          </classes>
          <content>
            <rng:ref name="model.headLike"/>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="model.divLike"/>
                <rng:ref name="model.textComponentLike"/>
              </rng:choice>
              <rng:zeroOrMore>
                <rng:ref name="model.milestoneLike.text"/>
              </rng:zeroOrMore>
            </rng:oneOrMore>
          </content>
        </elementSpec>

        <elementSpec ident="fig" module="MEI.figtable" mode="replace">
          <desc>(figure) – Groups elements representing or containing graphic information such as an
            illustration or figure.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="model.figureLike"/>
          </classes>
          <content>
            <rng:ref name="model.captionLike"/>
            <rng:choice>
              <rng:ref name="model.graphicLike"/>
              <rng:ref name="ex_egXML"/>
              <rng:ref name="programCode"/>
            </rng:choice>
          </content>
        </elementSpec>

        <elementSpec ident="graphic" module="MEI.figtable" mode="replace">
          <desc>Indicates the location of an inline graphic.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.dimensions"/>
            <memberOf key="att.internetMedia"/>
            <memberOf key="att.measurement"/>
            <memberOf key="att.startId"/>
            <memberOf key="att.visualOffset"/>
            <memberOf key="model.graphicLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="zone"/>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="graphic_attributes" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:zone/mei:graphic">
                <sch:assert role="warning" test="count(mei:*) = 0">Graphic child of zone should not
                  have children.</sch:assert>
              </sch:rule>
              <sch:rule context="mei:symbolDef/mei:graphic">
                <sch:assert role="warning" test="@startid or (@ulx and @uly)">Graphic should have
                  either a startid attribute or ulx and uly attributes.</sch:assert>
              </sch:rule>
              <sch:rule context="mei:graphic[not(ancestor::mei:symbolDef or ancestor::mei:zone)]">
                <sch:assert role="warning" test="not(@ulx or @uly)">Graphic should not have @ulx or
                  @uly attributes.</sch:assert>
                <sch:assert role="warning" test="not(@ho or @vo)">Graphic should not have @ho or @vo
                  attributes.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="check_graphicTarget" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:graphic[not(ancestor::ex:egXML)]/@target">
                <sch:assert test="not(normalize-space(.) eq '')">@target attribute must have
                  content.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="actuate" ns="http://www.w3.org/1999/xlink" usage="opt">
              <!--<attDef ident="xlink:actuate" usage="opt">-->
              <desc>Defines whether a link occurs automatically or must be requested by the
                user.</desc>
              <valList type="closed">
                <valItem ident="onLoad">
                  <desc>Load the target resource(s) immediately.</desc>
                </valItem>
                <valItem ident="onRequest">
                  <desc>Load the target resource(s) upon user request.</desc>
                </valItem>
                <valItem ident="none">
                  <desc>Do not permit loading of the target resource(s).</desc>
                </valItem>
                <valItem ident="other">
                  <desc>Behavior other than allowed by the other values of this attribute.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="role" ns="http://www.w3.org/1999/xlink" usage="opt">
              <!--<attDef ident="xlink:role" usage="opt">-->
              <desc>Characterization of the relationship between resources. The value of the role
                attribute must be a URI.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
            <attDef ident="show" ns="http://www.w3.org/1999/xlink" usage="opt">
              <!--<attDef ident="xlink:show" usage="opt">-->
              <desc>Defines how a remote resource is rendered.</desc>
              <valList type="closed">
                <valItem ident="new">
                  <desc>Open in a new window.</desc>
                </valItem>
                <valItem ident="replace">
                  <desc>Load the referenced resource in the same window.</desc>
                </valItem>
                <valItem ident="embed">
                  <desc>Embed the referenced resource at the point of the link.</desc>
                </valItem>
                <valItem ident="none">
                  <desc>Do not permit traversal to the referenced resource.</desc>
                </valItem>
                <valItem ident="other">
                  <desc>Behavior other than permitted by the other values of this attribute.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="target" usage="req">
              <desc>Allows the use of one or more previously-undeclared URIs to identify passive
                participants in a relationship; that is, the entities pointed "to".</desc>
              <datatype maxOccurs="1">
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
            <attDef ident="targettype" usage="opt">
              <desc>Characterization of target resource(s) using any convenient classification
                scheme or typology.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
            <attDef ident="ulx" usage="opt">
              <desc>Indicates the upper-left corner x coordinate.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="uly" usage="opt">
              <desc>Indicates the upper-left corner y coordinate.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="head" module="MEI.shared" mode="replace">
          <desc>(heading) – Contains any heading, for example, the title of a section of text, or
            the heading of a list.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.headLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textPhraseLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="check_headContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:head">
                <sch:assert test="text() or descendant::mei:*">The head element must have
                  content.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="ptr" module="MEI.ptrref" mode="replace">
          <desc>(pointer) – Defines a pointer to another location, using only attributes to describe
            the destination.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.targetEval"/>
            <memberOf key="model.locrefLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="check_ptrTarget" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:ptr[not(ancestor::ex:egXML)]/@target">
                <sch:assert test="every $i in tokenize(., '\s+') satisfies $i=//mei:bibl/@xml:id"
                  >The value in @target must correspond to the @xml:id attribute of a bibl
                  element.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="actuate" ns="http://www.w3.org/1999/xlink" usage="opt">
              <!--<attDef ident="xlink:actuate" usage="opt">-->
              <desc>Defines whether a link occurs automatically or must be requested by the
                user.</desc>
              <valList type="closed">
                <valItem ident="onLoad">
                  <desc>Load the target resource(s) immediately.</desc>
                </valItem>
                <valItem ident="onRequest">
                  <desc>Load the target resource(s) upon user request.</desc>
                </valItem>
                <valItem ident="none">
                  <desc>Do not permit loading of the target resource(s).</desc>
                </valItem>
                <valItem ident="other">
                  <desc>Behavior other than allowed by the other values of this attribute.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="role" ns="http://www.w3.org/1999/xlink" usage="opt">
              <!--<attDef ident="xlink:role" usage="opt">-->
              <desc>Characterization of the relationship between resources. The value of the role
                attribute must be a URI.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
            <attDef ident="show" ns="http://www.w3.org/1999/xlink" usage="opt">
              <!--<attDef ident="xlink:show" usage="opt">-->
              <desc>Defines how a remote resource is rendered.</desc>
              <valList type="closed">
                <valItem ident="new">
                  <desc>Open in a new window.</desc>
                </valItem>
                <valItem ident="replace">
                  <desc>Load the referenced resource in the same window.</desc>
                </valItem>
                <valItem ident="embed">
                  <desc>Embed the referenced resource at the point of the link.</desc>
                </valItem>
                <valItem ident="none">
                  <desc>Do not permit traversal to the referenced resource.</desc>
                </valItem>
                <valItem ident="other">
                  <desc>Behavior other than permitted by the other values of this attribute.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="target" usage="req">
              <desc>Allows the use of one or more previously-undeclared URIs to identify passive
                participants in a relationship; that is, the entities pointed "to".</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
            <attDef ident="targettype" usage="opt">
              <desc>Characterization of target resource(s) using any convenient classification
                scheme or typology.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="quote" module="MEI.text" mode="replace">
          <desc>(quoted material) – Contains text attributed to an external source, normally set off
            from the text by spacing or other typographic distinction.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.quoteLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.paracontentPart"/>
                <rng:ref name="p"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="biblRequired" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:quote">
                <sch:assert test="descendant::mei:bibl">A bibliographic reference is required for
                  quoted material.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="block">
              <desc>Indicates if the quotation is integrated into the flow of the text or interrupts
                it.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="rend" module="MEI.shared" mode="replace">
          <desc>(render) – A formatting element indicating special visual rendering, e.g., bold or
            italicized, of a text word or phrase.</desc>
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.horizontalAlign"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.whitespace"/>
            <memberOf key="model.rendLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textPhraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="rend" usage="req">
              <desc>Captures the appearance of the element's contents using MEI-defined
                descriptors.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.TEXTRENDITION"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="table" module="MEI.figtable" mode="replace">
          <desc>Contains text displayed in tabular form.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.tableLike"/>
          </classes>
          <content>
            <rng:ref name="model.captionLike"/>
            <rng:oneOrMore>
              <rng:ref name="tr"/>
            </rng:oneOrMore>
          </content>
        </elementSpec>

        <elementSpec ident="term" module="MEI.shared" mode="add">
          <desc>Indexing keyword or phrase.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.textPhraseLike.limited"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="term"/>
                <rng:ref name="model.textPhraseLike.limited"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <elementSpec ident="tr" module="MEI.figtable" mode="replace">
          <desc>(table row) – A formatting element that contains one or more cells (intersection of
            a row and a column) in a &lt;table&gt;.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="th"/>
                <rng:ref name="td"/>
              </rng:choice>
            </rng:oneOrMore>
          </content>
        </elementSpec>

        <classSpec ident="att.id" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that uniquely identify an element.</desc>
          <attList>
            <attDef ident="id" ns="http://www.w3.org/XML/1998/namespace" usage="opt">
              <!--<attDef ident="xml:id" usage="opt">-->
              <desc>Regularizes the naming of an element and thus facilitates building links between
                it and other resources. Each id attribute within a document must have a unique
                value.</desc>
              <datatype>
                <rng:data type="ID"/>
              </datatype>
              <constraintSpec ident="check_xmlID" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@xml:id">
                    <sch:assert test="not(normalize-space(.) eq '')">@xml:id attribute must have
                      content.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>

        <classSpec ident="att.lang" module="MEI.shared" type="atts" mode="replace">
          <desc>Language attributes common to text elements.</desc>
          <attList>
            <!--<attDef ident="lang" ns="http://www.w3.org/XML/1998/namespace" usage="opt">-->
            <attDef ident="xml:lang">
              <desc>Identifies the language of the element's content. The values for this attribute
                are language 'tags' as defined in BCP 47. All language tags that make use of private
                use sub-tags must be documented in a corresponding language element in the MEI
                header whose id attribute is the same as the language tag's value.</desc>
              <datatype>
                <rng:data type="language"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <classSpec ident="att.pointing" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes common to all pointing/linking elements.</desc>
          <attList>
            <attDef ident="target" usage="opt">
              <desc>Allows the use of one or more previously-undeclared URIs to identify passive
                participants in a relationship; that is, the entities pointed "to".</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
            <attDef ident="targettype" usage="opt">
              <desc>Characterization of target resource(s) using any convenient classification
                scheme or typology.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <classSpec ident="model.figureLike" module="MEI.figtable" type="model" mode="replace">
          <desc>Groups elements representing or containing graphic information such as an
            illustration or figure.</desc>
          <classes>
            <memberOf key="model.textPhraseLike.limited"/>
            <memberOf key="model.textComponentLike"/>
          </classes>
        </classSpec>

        <classSpec ident="att.accid.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.accid.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.accid.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.accid.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.accidental" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.accidental.performed" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.annot.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.annot.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.annot.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.annot.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.artic.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.artic.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.artic.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.artic.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.articulation" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.articulation.performed" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.augmentDots" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.authorized" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.barLine.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.barLine.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.barLine.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.barLine.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.barPlacement" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.beaming.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.bibl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.calendared" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.canonical" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.chord.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.chord.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.chord.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.chord.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.classCodeIdent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clef.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clef.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clef.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clef.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.cleffing.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.cleffing.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clefGrp.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clefGrp.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clefGrp.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clefGrp.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.clefShape" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.color" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.coloration" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.controlEvent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.coordinated" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.curvature" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.curveRend" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.custos.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.custos.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.custos.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.custos.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dataPointing" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.declaring" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dimensions" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dir.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dir.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dir.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dir.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.distances" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dot.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dot.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dot.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dot.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.duration.additive" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.duration.default" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.duration.musical" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.duration.performed" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.duration.ratio" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dynam.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dynam.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dynam.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.dynam.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.enclosingChars" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.ending.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.ending.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.ending.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.ending.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.endings" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.event" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.extender" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.f.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.f.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.f.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.f.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.fermataPresent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.grpSym.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.grpSym.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.grpSym.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.grpSym.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.handIdent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.height" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.horizontalAlign" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.instrumentIdent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.joined" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keyAccid.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keyAccid.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keyAccid.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keyAccid.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keySig.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keySig.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keySig.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keySig.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keySigDefault.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.keySigDefault.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.labels.addl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layer.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layer.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layer.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layer.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layerDef.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layerDef.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layerDef.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layerDef.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.layerIdent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.line.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.line.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.line.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.line.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.lineLoc" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.lineRend" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.lineRend.base" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.lyricStyle" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.measure.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.measure.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.measure.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.measureNumbers" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.mediaBounds" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.medium" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meiVersion" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.mensur.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterConformance" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterConformance.bar" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterSig.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterSig.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterSig.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterSig.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterSigDefault.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.meterSigDefault.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.mmTempo" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.multinumMeasures" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.notationStyle" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.note.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.note.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.note.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.note.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.noteHeads" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.octave" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.octaveDefault" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.octaveDisplacement" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.oneLineStaff" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.optimization" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.origin.layerIdent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.origin.staffIdent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.origin.startEndId" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.origin.timestamp.musical" module="MEI.shared" type="atts"
          mode="delete"/>

        <classSpec ident="att.ornam.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.ornam.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.ornam.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.ornam.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pad.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pad.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pad.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pad.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pages" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.part.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.part.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.part.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.part.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.parts.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.parts.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.parts.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.parts.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pb.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pb.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pb.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pb.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.phrase.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.phrase.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.phrase.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.phrase.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pitch" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.pitched" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.placement" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.plist" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.quantity" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.regularized" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.relativeSize" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.responsibility" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.rest.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.rest.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.rest.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.rest.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.sb.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.sb.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.sb.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.sb.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.scalable" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.score.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.score.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.score.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.score.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.scoreDef.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.scoreDef.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.scoreDef.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.scoreDef.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.section.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.section.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.section.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.section.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.sequence" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.slashCount" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.slurPresent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.space.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.space.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.space.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.space.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.spacing" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staff.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staff.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staff.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staff.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffDef.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffDef.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffDef.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffDef.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffGroupingSym" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffGrp.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffGrp.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffGrp.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffGrp.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffIdent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffLoc" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.staffLoc.pitched" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.startEndId" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.startId" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.stems" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.syl.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.syl.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.syl.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.syl.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.sylText" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.systems" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.tempo.anl" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.tempo.ges" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.tempo.log" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.tempo.vis" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.textStyle" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.tiePresent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.timestamp.musical" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.timestamp.performed" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.timestamp2.musical" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.transposition" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.tupletPresent" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.typography" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visibility" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset.ho" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset.to" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset.vo" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset2" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset2.ho" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset2.to" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.visualOffset2.vo" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.whitespace" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.width" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.xy" module="MEI.shared" type="atts" mode="delete"/>

        <classSpec ident="att.xy2" module="MEI.shared" type="atts" mode="delete"/>

        <elementSpec ident="accid" module="MEI.shared" mode="delete"/>

        <elementSpec ident="actor" module="MEI.shared" mode="delete"/>

        <elementSpec ident="arranger" module="MEI.shared" mode="delete"/>

        <elementSpec ident="artic" module="MEI.shared" mode="delete"/>

        <elementSpec ident="barLine" module="MEI.shared" mode="delete"/>

        <elementSpec ident="body" module="MEI.shared" mode="delete"/>

        <elementSpec ident="castGrp" module="MEI.shared" mode="delete"/>

        <elementSpec ident="castItem" module="MEI.shared" mode="delete"/>

        <elementSpec ident="castList" module="MEI.shared" mode="delete"/>

        <elementSpec ident="chord" module="MEI.shared" mode="delete"/>

        <elementSpec ident="clef" module="MEI.shared" mode="delete"/>

        <elementSpec ident="clefGrp" module="MEI.shared" mode="delete"/>

        <elementSpec ident="custos" module="MEI.shared" mode="delete"/>

        <elementSpec ident="depth" module="MEI.shared" mode="delete"/>

        <elementSpec ident="desc" module="MEI.shared" mode="delete"/>

        <elementSpec ident="dir" module="MEI.shared" mode="delete"/>

        <elementSpec ident="dot" module="MEI.shared" mode="delete"/>

        <elementSpec ident="dynam" module="MEI.shared" mode="delete"/>

        <elementSpec ident="ending" module="MEI.shared" mode="delete"/>

        <elementSpec ident="event" module="MEI.shared" mode="delete"/>

        <elementSpec ident="eventList" module="MEI.shared" mode="delete"/>

        <elementSpec ident="expansion" module="MEI.shared" mode="delete"/>

        <elementSpec ident="extent" module="MEI.shared" mode="delete"/>

        <elementSpec ident="funder" module="MEI.shared" mode="delete"/>

        <elementSpec ident="genre" module="MEI.shared" mode="delete"/>

        <elementSpec ident="group" module="MEI.shared" mode="delete"/>

        <elementSpec ident="grpSym" module="MEI.shared" mode="delete"/>

        <elementSpec ident="height" module="MEI.shared" mode="delete"/>

        <elementSpec ident="incip" module="MEI.shared" mode="delete"/>

        <elementSpec ident="keyAccid" module="MEI.shared" mode="delete"/>

        <elementSpec ident="keySig" module="MEI.shared" mode="delete"/>

        <elementSpec ident="label" module="MEI.shared" mode="delete"/>

        <elementSpec ident="layer" module="MEI.shared" mode="delete"/>

        <elementSpec ident="layerDef" module="MEI.shared" mode="delete"/>

        <elementSpec ident="mdiv" module="MEI.shared" mode="delete"/>

        <elementSpec ident="mei" module="MEI.shared" mode="delete"/>

        <elementSpec ident="music" module="MEI.shared" mode="delete"/>

        <elementSpec ident="note" module="MEI.shared" mode="delete"/>

        <elementSpec ident="ornam" module="MEI.shared" mode="delete"/>

        <elementSpec ident="pad" module="MEI.shared" mode="delete"/>

        <elementSpec ident="part" module="MEI.shared" mode="delete"/>

        <elementSpec ident="parts" module="MEI.shared" mode="delete"/>

        <elementSpec ident="pb" module="MEI.shared" mode="delete"/>

        <elementSpec ident="pgDesc" module="MEI.shared" mode="delete"/>

        <elementSpec ident="pgFoot" module="MEI.shared" mode="delete"/>

        <elementSpec ident="pgFoot2" module="MEI.shared" mode="delete"/>

        <elementSpec ident="pgHead" module="MEI.shared" mode="delete"/>

        <elementSpec ident="pgHead2" module="MEI.shared" mode="delete"/>

        <elementSpec ident="phrase" module="MEI.shared" mode="delete"/>

        <elementSpec ident="physLoc" module="MEI.shared" mode="delete"/>

        <elementSpec ident="recipient" module="MEI.shared" mode="delete"/>

        <elementSpec ident="relatedItem" module="MEI.shared" mode="delete"/>

        <elementSpec ident="repository" module="MEI.shared" mode="delete"/>

        <elementSpec ident="resp" module="MEI.shared" mode="delete"/>

        <elementSpec ident="respStmt" module="MEI.shared" mode="delete"/>

        <elementSpec ident="rest" module="MEI.shared" mode="delete"/>

        <elementSpec ident="role" module="MEI.shared" mode="delete"/>

        <elementSpec ident="roleDesc" module="MEI.shared" mode="delete"/>

        <elementSpec ident="sb" module="MEI.shared" mode="delete"/>

        <elementSpec ident="score" module="MEI.shared" mode="delete"/>

        <elementSpec ident="scoreDef" module="MEI.shared" mode="delete"/>

        <elementSpec ident="section" module="MEI.shared" mode="delete"/>

        <elementSpec ident="space" module="MEI.shared" mode="delete"/>

        <elementSpec ident="stack" module="MEI.shared" mode="delete"/>

        <elementSpec ident="staff" module="MEI.shared" mode="delete"/>

        <elementSpec ident="staffDef" module="MEI.shared" mode="delete"/>

        <elementSpec ident="staffGrp" module="MEI.shared" mode="delete"/>

        <elementSpec ident="syl" module="MEI.shared" mode="delete"/>

        <elementSpec ident="tempo" module="MEI.shared" mode="delete"/>

        <elementSpec ident="textLang" module="MEI.shared" mode="delete"/>

        <elementSpec ident="titlePage" module="MEI.shared" mode="delete"/>

        <elementSpec ident="width" module="MEI.shared" mode="delete"/>

        <macroSpec ident="data.TEXTRENDITIONLIST" module="MEI" type="dt" mode="replace">
          <desc>Closed list of text rendition values.</desc>
          <content>
            <valList type="closed">
              <valItem ident="bold">
                <desc>Relative font weight.</desc>
              </valItem>
              <valItem ident="fixed-width">
                <desc>Fixed-width font.</desc>
              </valItem>
              <valItem ident="italic">
                <desc>Italicized (slanted to right).</desc>
              </valItem>
              <valItem ident="quote">
                <desc>Surrounded by single quotes.</desc>
              </valItem>
              <valItem ident="quotedbl">
                <desc>Surrounded by double quotes.</desc>
              </valItem>
              <valItem ident="smcaps">
                <desc>Small capitals.</desc>
              </valItem>
              <valItem ident="strike">
                <desc>Struck through by '-'.</desc>
              </valItem>
              <valItem ident="sub">
                <desc>Subscript.</desc>
              </valItem>
              <valItem ident="sup">
                <desc>Superscript.</desc>
              </valItem>
              <valItem ident="underline">
                <desc>Underlined.</desc>
              </valItem>
            </valList>
          </content>
        </macroSpec>
        <macroSpec ident="data.TEXTRENDITIONPAR" module="MEI" type="dt" mode="delete"/>
        <macroSpec ident="data.TEXTRENDITION" module="MEI" type="dt" mode="replace">
          <desc>Text rendition values.</desc>
          <content>
            <macroRef key="data.TEXTRENDITIONLIST"/>
          </content>
        </macroSpec>


        <!-- ******************************************************************** -->
        <!-- NON-CONFORMING CHANGES -->

        <elementSpec ident="confSubmission" module="MEI.confPaper" mode="add">
          <desc>The outer-most container of a conference paper.</desc>
          <classes>
            <memberOf key="att.id"/>
            <memberOf key="att.labelled"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:ref name="title"/>
            <rng:ref name="authorList"/>
            <rng:ref name="abstract"/>
            <rng:oneOrMore>
              <rng:ref name="model.divLike"/>
            </rng:oneOrMore>
            <rng:ref name="biblList"/>
          </content>
          <constraintSpec ident="check_curlyQuotes" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:confSubmission">
                <sch:assert test="not(contains(., '“')) and not(contains(., '”'))">Replace "curly"
                  quotes with "straight" ones.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="type" usage="opt">
              <desc>Specifies the Music Encoding Conference presentation type.</desc>
              <valList type="closed">
                <valItem ident="paper">
                  <desc>Paper presentation.</desc>
                </valItem>
                <valItem ident="poster">
                  <desc>Poster presentation.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="version" usage="rec">
              <desc>This version of the schema.</desc>
              <valList type="closed">
                <valItem ident="0.05">
                  <desc>Version 0.05</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="abstract" module="MEI.confPaper" mode="add">
          <desc>Summary prefixed to a document</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:ref name="model.headLike"/>
            <rng:ref name="model.pLike"/>
          </content>
          <constraintSpec ident="check_abstractHeadContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:abstract">
                <sch:assert test="matches(mei:head, '^ABSTRACT$', 'i')">The head element must match
                  "ABSTRACT" – no other characters, spaces, punctuation signs or elements are
                  allowed.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="check_abstractContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:abstract/mei:p">
                <sch:assert
                  test="not(descendant::*[not(local-name() eq 'ptr' or local-name() eq 'ref' or local-name() eq 'rend' or local-name() eq 'term')])"
                  >The abstract paragraph cannot contain elements other than "ptr", "ref", "rend" or
                  "term".</sch:assert>
                <sch:assert test="string-length(normalize-space(.)) &gt; 0">The abstract element
                  must have textual content.</sch:assert>
                <sch:assert test="string-length(normalize-space(.)) &lt; 1200">The abstract must be
                  less than 1200 characters.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="authorList" module="MEI.confPaper" mode="add">
          <desc>Contains a list of the authors of the submission.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:oneOrMore>
              <rng:ref name="authorData"/>
            </rng:oneOrMore>
          </content>
        </elementSpec>

        <elementSpec ident="authorData" module="MEI.confPaper" mode="add">
          <desc>Information about an individual author.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:ref name="authorName"/>
            <rng:ref name="affiliation"/>
            <rng:ref name="email"/>
          </content>
        </elementSpec>

        <elementSpec ident="authorName" module="MEI.confPaper" mode="add">
          <desc>Contains the name of an author.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:ref name="famName"/>
            <rng:ref name="foreName"/>
          </content>
          <constraintSpec ident="check_nameContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:authorName/mei:famName">
                <sch:assert test="not(descendant::*)">The famName element cannot contain other
                  elements.</sch:assert>
                <sch:assert test="text()">The famName element must have content.</sch:assert>
              </sch:rule>
              <sch:rule context="mei:authorName/mei:foreName">
                <sch:assert test="not(descendant::*)">The foreName element cannot contain other
                  elements.</sch:assert>
                <sch:assert test="text()">The foreName element must have content.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="affiliation" module="MEI.confPaper" mode="add">
          <desc>An organization, employer, or sponsor with which the author is associated.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:text/>
          </content>
          <constraintSpec ident="check_affiliationContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:affiliation">
                <sch:assert test="string-length(normalize-space(text())) &gt; 0">The affiliation
                  element must have content.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="email" module="MEI.confPaper" mode="add">
          <desc>An email address.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:text/>
          </content>
          <constraintSpec ident="check_emailContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:email">
                <sch:assert test="text()">The email element must have content.</sch:assert>
                <!-- Regex from http://www.regular-expressions.info/email.html -->
                <sch:assert role="warning"
                  test="matches(normalize-space(.), '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$', 'i')"
                  >Non-standard email address.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <elementSpec ident="equation" module="MEI.confPaper" mode="add">
          <desc>Contains a mathematical expression graphic.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="model.figureLike"/>
          </classes>
          <content>
            <rng:ref name="model.captionLike"/>
            <rng:ref name="model.graphicLike"/>
          </content>
        </elementSpec>

        <elementSpec ident="programCode" module="MEI.confPaper" mode="add">
          <desc>Non-XML computer code. Program code that contains the left angle bracket / less-than
            symbol (&lt;) must be wrapped in a CDATA section.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="model.paracontentPart"/>
            <memberOf key="model.textComponentLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <elementSpec ident="egXML" module="MEI.confPaper" mode="add"
          ns="http://www.music-encoding.org/ns/mei/Examples" prefix="ex_"
          xmlns:ex="http://www.music-encoding.org/ns/mei/Examples">
          <desc>A single well-formed XML fragment demonstrating the use of some XML element or
            attribute, in which the egXML element itself functions as the root element.</desc>
          <classes>
            <!--<memberOf key="att.common"/>-->
            <memberOf key="att.whitespace"/>
            <memberOf key="model.paracontentPart"/>
            <memberOf key="model.textComponentLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:group>
                <rng:choice>
                  <rng:text/>
                  <rng:ref name="macro.anyXML"/>
                </rng:choice>
              </rng:group>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="check_egXMLContent" scheme="isoschematron">
            <constraint>
              <sch:rule context="ex:egXML">
                <sch:assert test="text() or descendant::*">The egXML element must have
                  content.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="valid" usage="opt">
              <desc>indicates the intended validity of the example with respect to a schema.</desc>
              <valList type="closed">
                <valItem ident="true">
                  <desc>the example is intended to be fully valid, assuming that its root element,
                    or a provided root element, could have been used as a possible root element in
                    the schema concerned. [Default]</desc>
                </valItem>
                <valItem ident="feasible">
                  <desc>the example could be transformed into a valid document by inserting any
                    number of valid attributes and child elements anywhere within it; or it is valid
                    against a version of the schema concerned in which the provision of character
                    data, list, element, or attribute values has been made optional.</desc>
                </valItem>
                <valItem ident="false">
                  <desc>the example is not intended to be valid, and contains deliberate
                    errors.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </elementSpec>

        <macroSpec ident="macro.anyXML" module="MEI.shared" type="pe" mode="replace">
          <desc>Permits any XML elements.</desc>
          <content>
            <rng:element>
              <rng:anyName>
                <rng:except>
                  <rng:nsName ns="http://www.music-encoding.org/ns/mei"/>
                  <rng:nsName ns="http://www.w3.org/2000/svg"/>
                </rng:except>
              </rng:anyName>
              <rng:zeroOrMore>
                <rng:attribute>
                  <rng:anyName/>
                </rng:attribute>
              </rng:zeroOrMore>
              <rng:zeroOrMore>
                <rng:choice>
                  <rng:text/>
                  <rng:ref name="macro.anyXML"/>
                </rng:choice>
              </rng:zeroOrMore>
            </rng:element>
          </content>
        </macroSpec>

      </schemaSpec>
    </body>
  </text>
</TEI>
